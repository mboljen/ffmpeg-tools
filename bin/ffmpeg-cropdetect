#!/usr/bin/env bash
#
# Created:         Mo 2020-05-11 01:00:51 CEST
# Last Modified:   Fri 2023-09-29 00:09:13 CEST
#
# ffmpeg-cropdetect:
#   Detect black margins of one or several video files.
#
set -euo pipefail

# Help text
usage() {
>&2 cat << EOF

Usage: ffmpeg-cropdetect [OPTION]... INFILE...

Detect black margins of one or several video files.

Options:
  -s, --skip=VALUE        Skip time (default: 2% of total time)
  -t, --time=VALUE        Scan time (default: 5% of total time)
  -c, --cropdetect=VALUE  Set cropdetect filter (LIMIT:ROUND:SKIP:RESET)
                          LIMIT = black threshold (default: 24)
                          ROUND = output resolution divisor (default: 16)
                          SKIP  = inital frames skipped (default: 2)
                          RESET = frames to restart detection process (default: 0)
  -h, --help              Show this help message and exit
EOF
}

# Echo error messages on STDERR
echoerr() { cat <<< "$@" 1>&2; }

# Initialization
FFMPEG=$(command -v ffmpeg)
FFPROBE=$(command -v ffprobe)

# Check if ffmpeg is available
if [ ! -x "${FFMPEG}" ]
then
    echoerr "ffmpeg not found, probably not installed"
    exit 1
fi

# Check if ffprobe is available
if [ ! -x "${FFPROBE}" ]
then
    echoerr "ffprobe not found, probably not installed"
    exit 1
fi

# Defaults of FFmpeg cropdetect option "LIMIT:ROUND:SKIP:RESET"
CROPDETECT='24:16:2:0'

# Parse command line options
args=$(getopt -a -o s:t:c:h --long skip:,time:,cropfilter:,help -- "$@")
if [[ $? -gt 0 ]]
then
    echoerr "Error processing command line options"
    usage
    exit 1
fi

# Process command line options
eval set -- ${args}
while :
do
    case $1 in
      -s | --skip)        SS=$2          ; shift 2 ;;
      -t | --time)        TIME=$2        ; shift 2 ;;
      -c | --cropdetect)  CROPDETECT=$2  ; shift 2 ;;
      -h | --help)        usage          ; shift   ; exit 0 ;;
      # -- means the end of the arguments; drop this, and break out of the while loop
      --) shift; break ;;
       *) echoerr "Unsupported option: $1"; usage ; shift; exit 1 ;;
    esac
done


# Regular expressions for timestamps
regex1='^[0-9]+(\.[0-9]+)?$'
regex2='^[0-9]+:[0-5][0-9](\.[0-9]+)?$'
regex3='^[0-9]+:([0-5][0-9]|2[0-3]):[0-5][0-9](\.[0-9]+)?$'

# convert-a-duration-HHMMSS-to-seconds-in-bash
# https://stackoverflow.com/questions/18149127/convert-a-duration-hhmmss-to-seconds-in-bash
to_seconds () {
    echo "$1" | awk -F':' '{if (NF == 1) { print $1 } else if (NF == 2) { print $1*60 + $2 } else if (NF == 3) { print $1*3600 + $2*60 + $3 }}'
}

# Pattern matching for SS
if [[ "$SS" =~ $regex1 ]] || [[ "$SS" =~ $regex2 ]] || [[ "$SS" =~ $regex3 ]]
then
    # Convert HH:MM:SS.sss to seconds
    SS=$(to_seconds "$SS")

elif [ -n "$SS" ]
then
    # Invalid pattern match, SS is not null and not empty
    echoerr "Invalid skip time '$SS'"
    exit 2
fi

# Pattern matching for T
if [[ "$TIME" =~ $regex1 ]] || [[ "$TIME" =~ $regex2 ]] || [[ "$TIME" =~ $regex3 ]]
then
    # Convert HH:MM:SS.sss to seconds
     TIME=$(to_seconds "$TIME")

elif [ -n "$TIME" ]
then
    # Invalid pattern match, T is not null and not empty
    echoerr "Invalid scan time '$TIME'"
    exit 3
fi

# Pattern matching for CROPDETECT
if [[ ! "${CROPDETECT}" =~ ^[0-9]+(((:[0-9]+)?:[0-9]+)?:[0-9]+)?$ ]]
then
    echoerr "Invalid cropdetect value '${CROPDETECT}'"
    exit 4
fi

# Check number of arguments
if [ "$#" -eq 0 ]
then
    echoerr "Expecting at least 1 argument"
    usage
    exit 1
fi

# Loop over arguments
while [ $# -gt 0 ]
do

    # get filename
    INFILE="$1"
    shift

    # Skip file if not existing
    if [ ! -f "${INFILE}" ]
    then
        echoerr "${INFILE} is not a valid file, skipped"
        continue
    fi

    # Get duration of first video stream in seconds
    dur=$("${FFPROBE}" -i "${INFILE}" -show_format -v quiet | sed -n 's/duration=//p')

    # Check duration
    if (( $(echo "$dur <= 0" | bc -l) ))
    then
        echoerr "${INFILE} has non-positive duration $dur ... skipped"
        continue
    fi

    # Auto-define timeframe
    if [ -z "$SS" ] && [ -z "$TIME" ]
    then

        if (( $(echo "$dur <= 60"| bc -l) ))
        then
            # Use total length of clip if duration is less than 10 secs
            T0=0
            T1="$dur"
        else
            # Empty starting and termination time
            T0=$(echo "$dur*0.02" | bc -l)
            T1=$(echo "$dur*0.05" | bc -l)
        fi

    elif [ -z "$TIME" ]
    then
        # Empty termination time
        T0="$SS"
        T1=$(echo "$SS+$dur*0.03" | bc -l)

    elif [ -z "$SS" ]
    then
        # Empty starting time
        T0=$(echo "$TIME-$dur*0.03" | bc -l)
        T1="$TIME"

    else
        # Defined starting and termination time
        T0="$SS"
        T1="$TIME"

    fi

    # Restrain start and end time
    (( $(echo "$T1 < $dur" | bc -l) )) || T1="$dur"
    (( $(echo "$T0 > 0"    | bc -l) )) || T0=0
    (( $(echo "$T0 < $T1"  | bc -l) )) || T0=0

    #echo "T0 = $T0"
    #echo "T1 = $T1"

    # Grep crop geometry
    result=$("${FFMPEG}" -i "${INFILE}" -ss "$T0" -t "$T1" -vsync vfr -vf "fps=1/2,cropdetect=${CROPDETECT}" -f null - 2>&1 | awk '/crop/ { print $NF }' | tr ' ' '\n' | sort | uniq -c | sort -n | tail -1 | awk '{ print $NF }')

    # Check result string
    [ -n "$result" ] && echo "$result" || exit 5

done
