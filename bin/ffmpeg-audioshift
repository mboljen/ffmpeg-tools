#!/usr/bin/env bash
#
# Created:         Mo 2019-08-26 11:18:48 CEST
# Last Modified:   So 2024-06-16 18:04:41 CEST
#
# ffmpeg-audioshift:
#   Delay the audio or video stream of one or several video files.
#
set -euo pipefail

# Help text
usage() {
>&2 cat << EOF

Usage: ffmpeg-audioshift [OPTION]... INFILE...

Delay the audio or video stream of one or several video files.

Options:
  -o, --offset=VALUE     Offset audio track in seconds (default: 0).  Positive values delay the audio track.
  -n, --name=VALUE       Set output filename suffix (default: 'none')
  -d, --directory=VALUE  Set output directory (default: 'pwd')
  -y, --yes              Overwrite existing files
  -h, --help             Show this help message and exit

EOF
}

# Echo error messages on STDERR
echoerr() { cat <<< "$@" 1>&2; }

# Initialization
FFMPEG=$(command -v ffmpeg)

# Check availability of converter
if [ ! -x "$FFMPEG" ]
then
    echoerr "ffmpeg not found, probably not installed"
    exit 1
fi

# Defaults
TIME=0.0
DIR=
NAME=
YES=0

# Parse command line options
if ! args=$(getopt -a -o o:n:d:hy --long offset:,name:,directory:,help,yes -- "$@")
then
    echoerr "Error processing command line options"
    usage
    exit 1
fi

# Process command line options
eval set -- "$args"
while :
do
    case $1 in
      -o | --offset)

           TIME=$2
           shift 2
           if [ "$(bc <<< "$TIME > 0")" -eq 1 ]
           then
               # Offset is positive, i.e. delay audio wrt video
               MAP="-map 0:v -map 1:a"
           else
               # Offset is negative, i.e. delay video wrt audio
               MAP="-map 1:v -map 0:a"
           fi
           ;;

      -n | --name)   NAME=$2 ; shift 2 ;;
      -d | --directory)  DIR=$2; shift 2 ;;
      -y | --yes)    YES=1   ; shift   ;;
      -h | --help)   usage   ; shift   ; exit 0 ;;
      # -- means the end of the arguments; drop this, and break out of the while loop
      --) shift; break ;;
       *) echoerr "Unsupported option: $1"; usage ; shift; exit 1 ;;
    esac
done


# Require offset to be non-zero
if (( $( echo "$TIME == 0" | bc -l ) ))
then
    echo "Offset is zero, nothing to be done"
    exit 0
fi

# Check number of arguments
if [ "$#" -eq 0 ]
then
    echoerr "Expecting at least 1 argument"
    usage
    exit 1
fi

# Check if NAME and DIR are both empty
if [ -z "$NAME" ] && [ -z "$DIR" ]
then
    echoerr "Specify either filename suffix or output directory"
    usage
    exit 1
fi

# Set output directory if not defined
if [ -z "$DIR" ]
then
    # Set current as output directory
    DIR=$(pwd)
else
    # Create output directory if not existing
    mkdir -p "$DIR"
fi

# Convert input files
for INFILE in "$@"
do
    # Check if file exists
    if [ -f "$INFILE" ]
    then

        # Show status
        echo -e "\n### Processing $INFILE ... please wait ...\n"

        # Assemble name of output file
        if [ -z "$NAME" ]
        then
            OUTFILE="$DIR/$INFILE"
        else
            OUTFILE="$DIR/${INFILE%.*}-$NAME.${INFILE##*.}"
        fi

        if [ -f "$OUTFILE" ] && [ "$YES" -eq 0 ]
        then
            echoerr "Outfile $OUTFILE already exists, skipped"
            continue
        fi

        # Process file
        "$FFMPEG" -y -i "$INFILE" -itsoffset "$TIME" -i "$INFILE" "$MAP" -vcodec copy -acodec copy "$OUTFILE"

    else

        # Show warning
        echo -e "\n### Skipping $INFILE ... not found\n"

    fi

done
