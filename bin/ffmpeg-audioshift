#!/usr/bin/env bash
#
# Created:         Mo 2019-08-26 11:18:48 CEST
# Last Modified:   Fri 2023-09-29 00:09:03 CEST
#
# ffmpeg-audioshift:
#   Delay the audio or video stream of one or several video files.
#
set -euo pipefail

# Help text
usage() {
>&2 cat << EOF

Usage: ffmpeg-audioshift [OPTION]... INFILE...

Delay the audio or video stream of one or several video files.

Options:
  -a, --audio=VALUE  Delay audio track in seconds (default: 0)
  -v, --video=VALUE  Delay video track in seconds (default: 0)
  -n, --name=VALUE   Set output filename suffix (default: 'audioshift')
  -y, --yes          Overwrite existing files
  -h, --help         Show this help message and exit
EOF
}

# Echo error messages on STDERR
echoerr() { cat <<< "$@" 1>&2; }

# Initialization
FFMPEG=$(command -v ffmpeg)

# Check availability of converter
if [ ! -x "${FFMPEG}" ]
then
    echoerr "ffmpeg not found, probably not installed"
    exit 1
fi

# Defaults
TIME=0.0
YES=0
NAME='audioshift'

# Parse command line options
args=$(getopt -a -o a:v:n:hy --long audio:,video:,name:,help,yes -- "$@")
if [[ $? -gt 0 ]]
then
    echoerr "Error processing command line options"
    usage
    exit 1
fi

# Process command line options
eval set -- ${args}
while :
do
    case $1 in
      -a | --audio)  TIME=$2 ; shift 2 ; MAP="-map 0:v -map 1:a" ;;
      -v | --video)  TIME=$2 ; shift 2 ; MAP="-map 1:v -map 0:a" ;;
      -n | --name)   NAME=$2 ; shift 2 ;;
      -y | --yes)    YES=1   ; shift   ;;
      -h | --help)   usage   ; shift   ; exit 0 ;;
      # -- means the end of the arguments; drop this, and break out of the while loop
      --) shift; break ;;
       *) echoerr "Unsupported option: $1"; usage ; shift; exit 1 ;;
    esac
done


# Require offset to be non-zero
if (( $( echo "${TIME} == 0" | bc -l ) ))
then
    echo "Offset is zero, nothing to be done"
    exit 0
fi

# Check number of arguments
if [ "$#" -eq 0 ]
then
    echoerr "Expecting at least 1 argument"
    usage
    exit 1
fi

# Convert input files
for INFILE in "$@"
do
    # Check if file exists
    if [ -f "${INFILE}" ]
    then

        # Show status
        echo -e "\n### Processing ${INFILE} ... please wait ...\n"

        # Process file
        "${FFMPEG}" -y -i "${INFILE}" -itsoffset "${TIME}" -i "${INFILE}" "${MAP}" -vcodec copy -acodec copy "${INFILE%.*}-${NAME}.${INFILE##*.}"

    else

        # Show warning
        echo -e "\n### Skipping ${INFILE} ... not found\n"

    fi

done
