#!/usr/bin/env bash
#
# Created:         So 2020-06-28 10:29:34 CEST
# Last Modified:   So 2024-06-16 18:04:37 CEST
#
# ffmpeg-fadeinout:
#    Add a fade-in and fade-out effect to one or several video files

set -euo pipefail

# Help text
usage() {
>&2 cat << EOF
Add a fade-in and fade-out effect to one or several video files

Usage: ffmpeg-fadeinout [OPTION]... INFILE...

Options:
  -t, --time=VALUE       Fade duration in seconds (default: 5)
  -m, --mode=VALUE       Fade-in only (i), fade-out only (o), both (default: 'b')
  -s, --stream=VALUE     Video stream only (v), audio stream only (a), both (default:b)
  -n, --name=VALUE       Set output filename suffix (default: 'none')
  -d, --directory=VALUE  Set output directory (default: 'fadeinout')
  -y, --yes              Overwrite existing files
  -h, --help             Show this help message and exit
EOF
}

# Echo error messages on STDERR
echoerr() { cat <<< "$@" 1>&2; }

# Initialization
FFMPEG=$(command -v ffmpeg)
FFPROBE=$(command -v ffprobe)

# Check if ffmpeg is available
if [ ! -x "$FFMPEG" ]
then
    echoerr "ffmpeg not found, probably not installed"
    exit 1
fi

# Check if ffprobe is available
if [ ! -x "$FFPROBE" ]
then
    echoerr "ffprobe not found, probably not installed"
    exit 1
fi


# Defaults
FADEDUR=5
MODE='b'
STREAM='b'
DIR=
NAME=
YES=0

# Parse command line options
if ! args=$(getopt -a -o t:m:s:n:d:yh --long time:,mode:,stream:,name:,directory:,yes,help -- "$@")
then
    echoerr "Error processing command line options"
    usage
    exit 1
fi

# Process command line options
eval set -- "${args}"
while :
do
    case $1 in
      -t | --time)       FADEDUR=$2 ; shift 2 ;;
      -m | --mode)       MODE=$2    ; shift 2 ;;
      -s | --stream)     STREAM=$2  ; shift 2 ;;
      -n | --name)       NAME=$2    ; shift 2 ;;
      -d | --directory)  DIR=$2     ; shift 2 ;;
      -y | --yes)        YES=1      ; shift   ;;
      -h | --help)       usage      ; shift   ; exit 0 ;;
      # -- means the end of the arguments; drop this, and break out of the while loop
      --) shift; break ;;
       *) echoerr "Unsupported option: $1"; usage ; shift; exit 1 ;;
    esac
done

# Check FADEDUR being a positive floating point number
result=$(echo "scale=2;$FADEDUR" | bc -q 2>/dev/null)
stat=$?
if [[ "$stat" -eq 0 && -z "$result" ]]
then

    echoerr "Fade duration not a floating point number: $FADEDUR"
    exit 1

elif (( $(echo "$FADEDUR < 0" | bc -l) ))
then

    echoerr "Fade duration not positive: $FADEDUR"
    exit 1

fi

# Check MODE flag
if [ "$MODE" != "b" ] && [ "$MODE" != "i" ] && [ "$MODE" != "o" ]
then

    echoerr "Invalid mode: $MODE"
    exit 1

fi

# Check STREAM flag
if [ "$STREAM" != "b" ] && [ "$STREAM" != "v" ] && [ "$STREAM" != "a" ]
then

    echoerr "Invalid stream: $STREAM"
    exit 1

fi

# Check number of arguments
if [ "$#" -eq 0 ]
then
    echoerr "Expecting at least 1 argument"
    usage
    exit 1
fi

# Check if NAME and DIR are both empty
if [ -z "$NAME" ] && [ -z "$DIR" ]
then
    echoerr "Specify either filename suffix or output directory"
    usage
    exit 1
fi

# Set output directory if not defined
if [ -z "$DIR" ]
then
    # Set current as output directory
    DIR=$(pwd)
else
    # Create output directory if not existing
    mkdir -p "$DIR"
fi

# Loop over input files
for f in "$@"
do
    # Check if file exists
    if ! [ -f "$f" ]
    then
        echoerr "Input file $f does not exist, skipped"
        continue
    fi

    # Fetch duration of video and calculate offset
    DUR=$(ffprobe -loglevel error -show_entries format=duration -of default=nk=1:nw=1 "$f")
    OFFSET=$(bc -l <<< "$DUR"-"$FADEDUR")

    # Check OFFSET not being negative
    if (( $(echo "$OFFSET < 0" | bc -l) ))
    then
        echoerr "Skipping $f, negative offset $OFFSET ..."
        continue
    fi

    # Assemble output filename
    FNAME=$(rev <<< "$f" | cut -d. -f2- | rev)
    FEXT=$(rev <<< "$f" | cut -d. -f1 | rev)
    if [ -z "$NAME" ]
    then
        FNEW="$DIR/$FNAME.$FEXT"
    else
        FNEW="$DIR/$FNAME-$NAME.$FEXT"
    fi

    # Skip ffmpeg if output file exists
    if [ -f "$FNEW" ] && [ $YES -eq 0 ]
    then
        echoerr "Outfile $FNEW already exists, skipped"
        continue
    fi

    # Assemble settings for ffmpeg
    FILTER=''
    MAP=()

    # Check if video fade is required
    if [ "$STREAM" != 2 ]
    then
        #
        TMP=''
        #
        [ "$MODE" != 2 ] && TMP+="${TMP:+,}fade=t=in:st=0:d=$FADEDUR"
        [ "$MODE" != 1 ] && TMP+="${TMP:+,}fade=t=out:st=$OFFSET:d=$FADEDUR"
        #
        FILTER+="[0:v]${TMP}[v]"
        MAP+=(-map '[v]')
    else
        # Copy video stream
        MAP+=(-map 0:v -c:v copy)
    fi

    # Check if audio fade is required
    if [ "$STREAM" != 1 ]
    then
        #
        TMP=''
        #
        [ "$MODE" != 2 ] && TMP+="${TMP:+,}afade=t=in:st=0:d=$FADEDUR"
        [ "$MODE" != 1 ] && TMP+="${TMP:+,}afade=t=out:st=$OFFSET:d=$FADEDUR"
        #
        FILTER+="${FILTER:+;}[0:a]${TMP}[a]"
        MAP+=(-map '[a]')
    else
        # Copy audio stream
        MAP+=(-map 0:a -c:a copy)
    fi

    # Assemble command line
    CMDLINE=("$FFMPEG" -y -i "$f" -filter_complex "$FILTER" "${MAP[@]}" "$FNEW")
    echo -e "\n[" "${CMDLINE[@]}" "]\n"

    # Execute ffmpeg
    "${CMDLINE[@]}"

done
