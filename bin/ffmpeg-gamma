#!/usr/bin/env bash
#
# Created:         Do 2023-03-16 12:35:18 CET
# Last Modified:   So 2024-06-16 18:04:38 CEST
#
# ffmpeg-gamma:
#   Enhance gamma and saturation of one or several video files

set -euo pipefail

# Help text
usage() {
>&2 cat << EOF
Enhance gamma and saturation of one or several video files

Usage: ffmpeg-gamma [OPTION]... INFILE...

Options:
  -g, --gamma=VALUE       Set gamma value (default: 1.0)
  -s, --saturation=VALUE  Set saturation level (default: 1.0)
  -n, --name=VALUE        Set output filename suffix (default: 'none')
  -d, --directory=VALUE   Set output directory (default: 'gamma')
  -y, --yes               Overwrite existing files
  -h, --help              Show this help message and exit
EOF
}

# Echo error messages on STDERR
echoerr() { cat <<< "$@" 1>&2; }

# Initialization
FFMPEG=$(command -v ffmpeg)

# Check if ffmpeg is available
if [ ! -x "$FFMPEG" ]
then
    echoerr "ffmpeg not found, probably not installed"
    exit 1
fi

GAMMA=1.0
SATURATION=1.0
DIR=
NAME=
YES=0

# Parse command line options
if ! args=$(getopt -a -o g:s:n:d:yh --long gamma:,saturation:,name:,directory:,yes,help -- "$@")
then
    echoerr "Error processing command line options"
    usage
    exit 1
fi

# Process command line options
eval set -- "${args}"
while :
do
    case $1 in
      -g | --gamma)       GAMMA=$2      ; shift 2 ;;
      -s | --saturation)  SATURATION=$2 ; shift 2 ;;
      -n | --name)        NAME=$2       ; shift 2 ;;
      -d | --directory)   DIR=$2        ; shift 2 ;;
      -y | --yes)         YES=1         ; shift   ;;
      -h | --help)        usage         ; shift   ; exit 0 ;;
      # -- means the end of the arguments; drop this, and break out of the while loop
      --) shift; break ;;
       *) echoerr "Unsupported option: $1"; usage ; shift; exit 1 ;;
    esac
done

# Check number of arguments
if [ "$#" -eq 0 ]
then
    echoerr "Expecting at least 1 argument"
    usage
    exit 1
fi

# Check if NAME and DIR are both empty
if [ -z "$NAME" ] && [ -z "$DIR" ]
then
    echoerr "Specify either filename suffix or output directory"
    usage
    exit 1
fi

# Set output directory if not defined
if [ -z "$DIR" ]
then
    # Set current as output directory
    DIR=$(pwd)
else
    # Create output directory if not existing
    mkdir -p "$DIR"
fi

#
while [ $# -gt 0 ]
do
    #
    INFILE=$1
    shift

    #
    if [ ! -f "$INFILE" ]
    then
        echoerr "$INFILE is not a valid file, skipped"
        continue
    fi

    tmp=$(basename -- "$INFILE")
    if [ -z "$NAME" ]
    then
        OUTFILE="$DIR/${tmp%.*}.${tmp##*.}"
    else
        OUTFILE="$DIR/${tmp%.*}-$NAME.${tmp##*.}"
    fi

    #
    if [ -f "$OUTFILE" ] && [ "$YES" -ne 1 ]
    then
        echoerr "$OUTFILE already exists, skipped"
        continue
    fi

    # Create temporary directory
    TMPDIR=$(mktemp --directory --tmpdir)

    # Split video in image and modify gamma and saturation on the fly
    "$FFMPEG" -i "$INFILE" -vf "fps=10,eq=gamma=$GAMMA:saturation=$SATURATION" "$TMPDIR/img-%03d.png"

    # Reassemble video
    "$FFMPEG" -y -r 60 -f image2 -i "${TMPDIR}/img-%03d.png" -c:v libx264 -crf 25 -pix_fmt yuv420p -an "$OUTFILE"

    # Remove temporary directory
    rm -rf "$TMPDIR"

done
