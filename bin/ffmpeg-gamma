#!/usr/bin/env bash
#
# Created:         Do 2023-03-16 12:35:18 CET
# Last Modified:   Thu 2023-09-28 23:19:53 CEST
#
# ffmpeg-gamma:
#   Enhance gamma and saturation of one or several video files.
#
set -euo pipefail

# Help text
usage() {
>&2 cat << EOF

Usage: ffmpeg-gamma [OPTION] INFILE...

Enhance gamma and saturation of one or several video files.

Options:
  -g, --gamma=VALUE       Set gamma value (default: 1.0)
  -s, --saturation=VALUE  Set saturation level (default: 1.0)
  -n, --name=VALUE        Set output filename suffix (default: 'gamma')
  -y, --yes               Overwrite existing files
  -h, --help              Show this help message and exit
EOF
}

# Echo error messages on STDERR
echoerr() { cat <<< "$@" 1>&2; }

# Initialization
FFMPEG=$(command -v ffmpeg)

# Check if ffmpeg is available
if [ ! -x "${FFMPEG}" ]
then
    echoerr "ffmpeg not found, probably not installed"
    exit 1
fi

GAMMA=1.0
SATURATION=1.0
YES=0
NAME='gamma'

# Parse command line options
args=$(getopt -a -o g:s:n:yh --long gamma:,saturation:,name:,yes,help -- "$@")
if [[ $? -gt 0 ]]
then
    echoerr "Error processing command line options"
    usage
    exit 1
fi

# Process command line options
eval set -- ${args}
while :
do
    case $1 in
      -g | --gamma)       GAMMA=$2      ; shift 2 ;;
      -s | --saturation)  SATURATION=$2 ; shift 2 ;;
      -n | --name)        NAME=$2       ; shift 2 ;;
      -y | --yes)         YES=1         ; shift   ;;
      -h | --help)        usage         ; shift   ; exit 0 ;;
      # -- means the end of the arguments; drop this, and break out of the while loop
      --) shift; break ;;
       *) echoerr "Unsupported option: $1"; usage ; shift; exit 1 ;;
    esac
done

# Check number of arguments
if [ "$#" -eq 0 ]
then
    echoerr "Expecting at least 1 argument"
    usage
    exit 1
fi

#
while [ $# -gt 0 ]
do
    #
    INFILE=$1
    shift

    #
    if [ ! -f "${INFILE}" ]
    then
        echoerr "${INFILE} is not a valid file, skipped"
        continue
    fi

    tmp=$(basename -- "${INFILE}")
    OUTFILE="${tmp%.*}-${NAME}.${tmp##*.}"

    #
    if [ -f "${OUTFILE}" ] && [ ${YES} -ne 1 ]
    then
        echoerr "${OUTFILE} already exists, skipped"
        continue
    fi

    # Create temporary directory
    TMPDIR=$(mktemp --directory --tmpdir)

    # Split video in image and modify gamma and saturation on the fly
    "${FFMPEG}" -i "${INFILE}" -vf fps=10,eq=gamma=${GAMMA}:saturation=${SATURATION} "${TMPDIR}/img-%03d.png"

    # Reassemble video
    "${FFMPEG}" -y -r 60 -f image2 -i "${TMPDIR}/img-%03d.png" -c:v libx264 -crf 25 -pix_fmt yuv420p -an "${OUTFILE}"

    # Remove temporary directory
    rm -rf "${TMPDIR}"

done
